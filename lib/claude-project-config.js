const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');

/**
 * Creates Claude-compatible project configuration
 * This ensures Claude recognizes all agents as native commands
 */
class ClaudeProjectConfig {
  constructor() {
    this.agents = [
      'agent_react_components',
      'agent_tailwind_estilization',
      'agent_responsiveness',
      'agent_animations',
      'agent_accessibility',
      'agent_performance',
      'agent_security',
      'agent_code_quality',
      'agent_integration_tests',
      'agent_e_2_e_cypress',
      'agent_redux_toolkit',
      'agent_state_manager',
      'agent_figma_extract',
      'agent_i_18_n',
      'agent_analytics',
      'agent_github_flow',
      'agent_github_pullrequest',
      'agent_nlp_classifier',
      'agent_master_orchestrator',
      'agent_pipeline_optimizer',
      'agent_cleanup_manager',
      'agent_metrics_collector',
      'agent_technical_roundtable',
      'agent_realtime_monitor'
    ];
  }

  async createClaudeConfig(projectDir) {
    console.log(chalk.blue('üîß Criando configura√ß√£o para reconhecimento nativo...'));

    // Create .claude-project file for native recognition
    const claudeProjectFile = {
      name: 'Frontend Flow Agents',
      version: '2.5.0',
      description: 'Sistema de orquestra√ß√£o com 29 agentes especializados',
      type: 'agent-orchestration',
      agents: this.agents.map(agent => ({
        name: agent,
        path: `agents/${agent}.md`,
        type: 'markdown',
        executable: true,
        keywords: this.getAgentKeywords(agent)
      })),
      commands: {
        'mesa t√©cnica': {
          description: 'Executar mesa t√©cnica com 13 especialistas',
          agent: 'agent_technical_roundtable',
          aliases: ['technical roundtable', 'mesa tecnica', 'roundtable']
        },
        'criar componente': {
          description: 'Criar componente React com TypeScript',
          agent: 'agent_react_components',
          aliases: ['create component', 'new component', 'componente react']
        },
        'an√°lise seguran√ßa': {
          description: 'An√°lise de seguran√ßa OWASP',
          agent: 'agent_security',
          aliases: ['security analysis', 'owasp', 'vulnerabilities']
        }
      },
      integrations: {
        mcp: ['shadcn-ui', 'context7', 'github', 'figma'],
        claude: {
          nativeExecution: true,
          autoComplete: true,
          contextAware: true
        }
      }
    };

    const configPath = path.join(projectDir, '.claude-project');
    await fs.writeJson(configPath, claudeProjectFile, { spaces: 2 });

    console.log(chalk.green('  ‚úì Arquivo .claude-project criado'));

    // Also create a commands.txt for direct Claude recognition
    const commandsList = this.generateCommandsList();
    const commandsPath = path.join(projectDir, 'COMMANDS.md');
    await fs.writeFile(commandsPath, commandsList, 'utf8');

    console.log(chalk.green('  ‚úì Lista de comandos COMMANDS.md criada'));

    return true;
  }

  getAgentKeywords(agentName) {
    const keywords = {
      agent_react_components: ['react', 'component', 'tsx', 'jsx', 'ui'],
      agent_tailwind_estilization: ['tailwind', 'css', 'style', 'styling'],
      agent_responsiveness: ['responsive', 'mobile', 'tablet', 'breakpoint'],
      agent_animations: ['animation', 'transition', 'framer-motion', 'gsap'],
      agent_accessibility: ['a11y', 'wcag', 'aria', 'screen-reader'],
      agent_performance: ['performance', 'optimization', 'bundle', 'lazy'],
      agent_security: ['security', 'owasp', 'vulnerability', 'xss', 'csrf'],
      agent_technical_roundtable: ['mesa', 't√©cnica', 'roundtable', 'specialists']
    };

    return keywords[agentName] || [];
  }

  generateCommandsList() {
    return `# Frontend Flow - Comandos Dispon√≠veis

## ü§ñ Como Usar no Claude

Ap√≥s a instala√ß√£o nativa, voc√™ pode usar os agentes de v√°rias formas:

### Formato 1: Comando direto
\`\`\`
execute agent_react_components para criar formul√°rio
use agent_security para an√°lise
run agent_performance para otimiza√ß√£o
\`\`\`

### Formato 2: Linguagem natural
\`\`\`
"crie um componente de dashboard usando o agent_react_components"
"fa√ßa uma an√°lise de seguran√ßa com agent_security"
"execute a mesa t√©cnica sobre arquitetura"
\`\`\`

### Formato 3: Atalhos
\`\`\`
mesa t√©cnica: analise a arquitetura do projeto
criar componente: formul√°rio de contato responsivo
an√°lise seguran√ßa: verificar vulnerabilidades OWASP
\`\`\`

## üìã Lista Completa de Agentes

### Frontend Core
- **agent_react_components** - Cria√ß√£o de componentes React com TypeScript
- **agent_tailwind_estilization** - Estiliza√ß√£o com Tailwind CSS
- **agent_responsiveness** - Design responsivo e breakpoints
- **agent_animations** - Anima√ß√µes e micro-intera√ß√µes

### Quality & Testing
- **agent_code_quality** - An√°lise de qualidade de c√≥digo
- **agent_integration_tests** - Testes de integra√ß√£o
- **agent_e_2_e_cypress** - Testes end-to-end com Cypress
- **agent_accessibility** - Acessibilidade WCAG

### Performance & Security
- **agent_performance** - Otimiza√ß√£o de performance
- **agent_security** - An√°lise de seguran√ßa OWASP

### State & Data
- **agent_redux_toolkit** - Gerenciamento de estado com Redux
- **agent_state_manager** - Gerenciamento de estado do pipeline

### Integration & Workflow
- **agent_github_flow** - Integra√ß√£o com GitHub
- **agent_github_pullrequest** - Cria√ß√£o de pull requests
- **agent_figma_extract** - Extra√ß√£o de design tokens do Figma

### Orchestration & Monitoring
- **agent_master_orchestrator** - Orquestra√ß√£o principal
- **agent_pipeline_optimizer** - Otimiza√ß√£o do pipeline
- **agent_metrics_collector** - Coleta de m√©tricas
- **agent_realtime_monitor** - Monitoramento em tempo real

### Special Features
- **agent_technical_roundtable** - Mesa t√©cnica com 13 especialistas
- **agent_nlp_classifier** - Classifica√ß√£o NLP de demandas
- **agent_i_18_n** - Internacionaliza√ß√£o
- **agent_analytics** - Analytics e tracking

## üéØ Exemplos Pr√°ticos

### Criar um componente completo
\`\`\`
execute agent_react_components para criar um formul√°rio de login com valida√ß√£o
\`\`\`

### An√°lise completa com mesa t√©cnica
\`\`\`
use mesa t√©cnica para analisar: implementar sistema de notifica√ß√µes em tempo real
\`\`\`

### Pipeline completo
\`\`\`
execute pipeline completo: criar dashboard administrativo responsivo
\`\`\`

### Otimiza√ß√£o de performance
\`\`\`
use agent_performance para otimizar bundle e lazy loading
\`\`\`

### An√°lise de seguran√ßa
\`\`\`
execute agent_security para verificar vulnerabilidades OWASP no projeto
\`\`\`

## üí° Dicas

1. **Mesa T√©cnica**: Use para decis√µes arquiteturais importantes
2. **Combine agentes**: M√∫ltiplos agentes podem trabalhar em sequ√™ncia
3. **Modo Enhanced**: Adicione "enhanced" para execu√ß√£o completa do pipeline
4. **Paraleliza√ß√£o**: Agentes independentes executam em paralelo automaticamente

## üìö Documenta√ß√£o Completa

Para mais detalhes sobre cada agente, consulte os arquivos em:
\`~/.claude/projects/frontend-flow-agents/agents/\`
`;
  }
}

module.exports = ClaudeProjectConfig;