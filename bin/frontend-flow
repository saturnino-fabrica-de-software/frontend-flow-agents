#!/usr/bin/env node

const { program } = require('commander');
const chalk = require('chalk');
const path = require('path');
const fs = require('fs-extra');

// Import core modules
const { initProject } = require('../lib/init');
const { analyzeProject } = require('../lib/analyzer');
const { runPipeline } = require('../lib/orchestrator');
const { showStatus } = require('../lib/status');

const packageJson = require('../package.json');

program
  .name('frontend-flow')
  .description('üöÄ Orquestrador de agentes IA para desenvolvimento React/TypeScript')
  .version(packageJson.version);

// Command: init - Setup project
program
  .command('init')
  .description('üîß Inicializar Frontend Flow no projeto atual')
  .option('--force', 'Sobrescrever configura√ß√£o existente')
  .action(async (options) => {
    console.log(chalk.blue('üöÄ Inicializando Frontend Flow...'));
    try {
      await initProject(process.cwd(), options);
      console.log(chalk.green('‚úÖ Frontend Flow configurado com sucesso!'));
      console.log(chalk.cyan('üìñ Use: frontend-flow "sua demanda" para come√ßar'));
    } catch (error) {
      console.error(chalk.red('‚ùå Erro na inicializa√ß√£o:'), error.message);
      process.exit(1);
    }
  });

// Command: status - Show pipeline status
program
  .command('status')
  .description('üìä Mostrar status do pipeline atual')
  .action(async () => {
    try {
      await showStatus(process.cwd());
    } catch (error) {
      console.error(chalk.red('‚ùå Erro ao mostrar status:'), error.message);
      process.exit(1);
    }
  });

// Command: doctor - Check system health
program
  .command('doctor')
  .description('üè• Verificar sa√∫de do sistema e depend√™ncias')
  .action(async () => {
    try {
      const { checkSystemHealth } = require('../lib/doctor');
      await checkSystemHealth();
    } catch (error) {
      console.error(chalk.red('‚ùå Erro na verifica√ß√£o:'), error.message);
      process.exit(1);
    }
  });

// Command: clean - Clean temporary files
program
  .command('clean')
  .description('üßπ Limpar arquivos tempor√°rios')
  .option('--all', 'Limpar todos os arquivos incluindo cache')
  .action(async (options) => {
    console.log(chalk.blue('üßπ Limpando arquivos tempor√°rios...'));
    try {
      const { cleanTemp } = require('../lib/cleanup');
      await cleanTemp(process.cwd(), options);
      console.log(chalk.green('‚úÖ Limpeza conclu√≠da!'));
    } catch (error) {
      console.error(chalk.red('‚ùå Erro na limpeza:'), error.message);
      process.exit(1);
    }
  });

// Main command - Execute demand
program
  .argument('[demand]', 'Demanda em linguagem natural')
  .option('-v, --verbose', 'Modo verbose com logs detalhados')
  .option('--dry-run', 'Simular execu√ß√£o sem fazer altera√ß√µes')
  .option('--pipeline <type>', 'For√ßar tipo de pipeline espec√≠fico')
  .option('--non-interactive', 'For√ßar modo n√£o-interativo (sem prompts do usu√°rio)')
  .action(async (demand, options) => {
    if (!demand) {
      console.log(chalk.yellow('üí° Exemplo de uso:'));
      console.log(chalk.cyan('  frontend-flow "criar bot√£o de login responsivo"'));
      console.log(chalk.cyan('  frontend-flow "implementar dashboard com gr√°ficos"'));
      console.log(chalk.cyan('  frontend-flow "otimizar performance da listagem"'));
      return;
    }

    console.log(chalk.blue('üöÄ Frontend Flow - Orquestrador de Agentes'));
    console.log(chalk.cyan(`üìù Demanda: "${demand}"`));
    console.log('');

    try {
      // Verificar se projeto est√° inicializado
      const projectPath = process.cwd();
      const configPath = path.join(projectPath, '.frontend-flow');

      if (!await fs.pathExists(configPath)) {
        console.log(chalk.yellow('‚ö†Ô∏è  Projeto n√£o inicializado. Executando init automaticamente...'));
        await initProject(projectPath, {});
        console.log(chalk.green('‚úÖ Projeto inicializado!'));
        console.log('');
      }

      // Analisar projeto
      console.log(chalk.blue('üîç Analisando projeto...'));
      const projectInfo = await analyzeProject(projectPath);
      console.log(chalk.green(`‚úÖ Projeto ${projectInfo.type} detectado`));
      console.log('');

      // Executar pipeline
      console.log(chalk.blue('ü§ñ Iniciando pipeline aut√¥nomo...'));
      const result = await runPipeline(demand, projectPath, {
        ...options,
        projectInfo
      });

      console.log('');
      console.log(chalk.green('üéâ Pipeline conclu√≠do com sucesso!'));
      console.log(chalk.cyan('üìä Resultados:'));
      console.log(`   ‚Ä¢ Tempo: ${result.duration}`);
      console.log(`   ‚Ä¢ Agentes executados: ${result.agentsExecuted}`);
      console.log(`   ‚Ä¢ Arquivos modificados: ${result.filesModified}`);

      if (result.pullRequest) {
        console.log(chalk.magenta(`   ‚Ä¢ Pull Request: ${result.pullRequest}`));
      }

    } catch (error) {
      console.error('');
      console.error(chalk.red('‚ùå Erro na execu√ß√£o:'), error.message);

      if (options.verbose) {
        console.error(chalk.gray(error.stack));
      }

      console.error('');
      console.error(chalk.yellow('üí° Dicas:'));
      console.error('   ‚Ä¢ Use --verbose para mais detalhes');
      console.error('   ‚Ä¢ Verifique o arquivo de estado: .frontend-flow/temp/current_pipeline_state.md');
      console.error('   ‚Ä¢ Use frontend-flow status para ver o status atual');

      process.exit(1);
    }
  });

// Parse arguments
program.parse();

// Show help if no arguments provided
if (!process.argv.slice(2).length) {
  console.log(chalk.blue('üöÄ Frontend Flow - Orquestrador de Agentes'));
  console.log('');
  console.log(chalk.cyan('üí° Exemplos de uso:'));
  console.log('  frontend-flow init                           # Inicializar projeto');
  console.log('  frontend-flow "criar bot√£o responsivo"       # Executar demanda');
  console.log('  frontend-flow "dashboard com analytics"      # Feature completa');
  console.log('  frontend-flow status                        # Ver status');
  console.log('  frontend-flow clean                         # Limpar temp');
  console.log('');
  console.log(chalk.gray('Use --help para ver todas as op√ß√µes'));
}